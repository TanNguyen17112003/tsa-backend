generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String             @id @default(cuid())
  firstName         String?            @db.VarChar(50)
  lastName          String?            @db.VarChar(50)
  role              UserRole           @default(STUDENT)
  verified          Boolean            @default(false)
  phoneNumber       String?            @unique @db.VarChar(15)
  photoUrl          String?            @db.VarChar(500)
  email             String             @unique @db.VarChar(50)
  password          String?            @db.VarChar(255)
  createdAt         DateTime           @default(now()) @db.Timestamptz(3)
  status            UserStatus         @default(AVAILABLE)
  admin             Admin?
  staff             Staff?
  student           Student?
  AuthProvider      AuthProvider?
  verificationEmail VerificationEmail?
  DeviceToken       DeviceToken[]
  Notification      Notification[]
  refreshTokens     RefreshToken[]
  ticketReplies     TicketReply[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime @db.Timestamptz(3)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuthProvider {
  uid  String           @id @default(cuid())
  type AuthProviderType
  user User             @relation(fields: [uid], references: [id], onDelete: Cascade)
}

model Student {
  studentId   String     @id @unique
  building    String?
  dormitory   Dormitory?
  room        String?
  numberFault Int        @default(0)
  orders      Order[]
  reports     Report[]
  user        User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  tickets     Ticket[]
}

model Staff {
  staffId    String     @id @unique
  deliveries Delivery[]
  orders     Order[]
  user       User       @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

model Admin {
  adminId String   @id @unique
  user    User     @relation(fields: [adminId], references: [id])
  reports Report[]
}

model VerificationEmail {
  id        String   @id @default(cuid())
  userId    String   @unique
  expiresAt DateTime @default(dbgenerated("(now() + '00:03:00'::interval)")) @db.Timestamptz(3)
  token     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id                 String               @id @default(cuid())
  shippingFee        Float?
  studentId          String?
  checkCode          String               @db.VarChar(255)
  weight             Float?
  shipperId          String?              @db.VarChar(255)
  isPaid             Boolean              @default(false)
  paymentMethod      PaymentMethod?
  building           String?              @db.VarChar(255)
  deliveryDate       String?
  dormitory          Dormitory?
  phone              String?              @db.VarChar(15)
  product            String?              @db.VarChar(255)
  room               String?              @db.VarChar(255)
  latestStatus       OrderStatus?
  brand              String?              @db.VarChar(255)
  remainingAmount    Float?
  finishedImage      String?              @db.VarChar(255)
  Notification       Notification[]
  staff              Staff?               @relation(fields: [shipperId], references: [staffId])
  student            Student?             @relation(fields: [studentId], references: [studentId])
  orderStatusHistory OrderStatusHistory[]
  deliveries         OrdersOnDeliveries[]
  payment            Payment[]
  report             Report[]
  receivedImage      String?
}

model OrderStatusHistory {
  id            String      @id @default(cuid())
  orderId       String      @db.VarChar(255)
  status        OrderStatus
  reason        String?
  time          String      @db.VarChar(255)
  canceledImage String?     @db.VarChar(255)
  order         Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Delivery {
  createdAt             String                  @db.VarChar(255)
  id                    String                  @id @default(cuid())
  staffId               String?                 @db.VarChar(255)
  limitTime             Int
  latestStatus          DeliveryStatus          @default(PENDING)
  numberOrder           Int                     @default(0)
  displayId             String                  @unique
  staff                 Staff?                  @relation(fields: [staffId], references: [staffId])
  DeliveryStatusHistory DeliveryStatusHistory[]
  Notification          Notification[]
  orders                OrdersOnDeliveries[]
}

model DeliveryStatusHistory {
  id            String         @id @default(cuid())
  deliveryId    String         @db.VarChar(255)
  status        DeliveryStatus
  reason        String?
  time          String         @db.VarChar(255)
  canceledImage String?        @db.VarChar(255)
  delivery      Delivery       @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
}

model OrdersOnDeliveries {
  orderId       String
  deliveryId    String
  orderSequence Int
  delivery      Delivery @relation(fields: [deliveryId], references: [id])
  order         Order    @relation(fields: [orderId], references: [id])

  @@id([deliveryId, orderId])
}

model Report {
  orderId      String         @db.VarChar(255)
  content      String
  reportedAt   String         @db.VarChar(255)
  proof        String         @db.VarChar(255)
  reply        String?
  status       ReportStatus   @default(PENDING)
  id           String         @id @default(cuid())
  repliedAt    String?        @db.VarChar(255)
  replierId    String?        @db.VarChar(255)
  studentId    String         @db.VarChar(255)
  Notification Notification[]
  order        Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  admin        Admin?         @relation(fields: [replierId], references: [adminId])
  student      Student        @relation(fields: [studentId], references: [studentId])
}

model Notification {
  id         String          @id @default(cuid())
  type       NotificatioType
  title      String
  content    String
  createdAt  String          @db.VarChar(255)
  orderId    String?         @db.VarChar(255)
  deliveryId String?         @db.VarChar(255)
  reportId   String?         @db.VarChar(255)
  userId     String
  isRead     Boolean         @default(false)
  delivery   Delivery?       @relation(fields: [deliveryId], references: [id])
  order      Order?          @relation(fields: [orderId], references: [id])
  report     Report?         @relation(fields: [reportId], references: [id])
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DeviceToken {
  id           String       @id @default(cuid())
  userId       String
  token        String       @unique
  platform     Platform
  pushNotiType PushNotiType
  createdAt    String       @db.VarChar(255)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id                     String  @id @default(cuid())
  orderId                String  @db.VarChar(255)
  amount                 Float
  isPaid                 Boolean @default(false)
  orderCode              String  @unique @db.VarChar(255)
  counterAccountBankName String? @db.VarChar(255)
  counterAccountName     String? @db.VarChar(255)
  counterAccountNumber   String? @db.VarChar(255)
  order                  Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Recognition {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
}

model Ticket {
  id          String             @id @default(cuid())
  studentId   String
  title       String
  content     String
  status      TicketStatus       @default(PENDING)
  categoryId  String
  createdAt   DateTime           @default(now()) @db.Timestamptz(3)
  displayId   String             @unique
  category    TicketCategory     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  student     Student            @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  attachments TicketAttachment[]
  replies     TicketReply[]
}

model TicketReply {
  id          String             @id @default(cuid())
  ticketId    String
  userId      String
  content     String
  createdAt   DateTime           @default(now()) @db.Timestamptz(3)
  attachments TicketAttachment[]
  ticket      Ticket             @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TicketAttachment {
  id         String       @id @default(cuid())
  ticketId   String?
  replyId    String?
  fileUrl    String       @db.VarChar(255)
  uploadedAt DateTime     @default(now()) @db.Timestamptz(3)
  reply      TicketReply? @relation(fields: [replyId], references: [id], onDelete: Cascade)
  ticket     Ticket?      @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model TicketCategory {
  id      String   @id @default(cuid())
  name    String   @unique
  tickets Ticket[]
}

model DormitoryRegulation {
  id            String                @id @default(cuid())
  name          Dormitory             @unique
  banThreshold  Int
  deliverySlots AllowedDeliverySlot[]
  updateAt      DateTime              @updatedAt
}

model AllowedDeliverySlot {
  id           String              @id @default(cuid())
  regulation   DormitoryRegulation @relation(fields: [regulationId], references: [id])
  regulationId String
  startTime    String
  endTime      String
  updateAt     DateTime            @updatedAt
}

enum UserRole {
  ADMIN
  STUDENT
  STAFF
}

enum Dormitory {
  A
  B
}

enum OrderStatus {
  PENDING
  ACCEPTED
  REJECTED
  DELIVERED
  CANCELED
  IN_TRANSPORT
  RECEIVED_EXTERNAL
}

enum DeliveryStatus {
  PENDING
  ACCEPTED
  FINISHED
  CANCELED
}

enum UserStatus {
  AVAILABLE
  DEACTIVATED
  BANNED
}

enum ReportStatus {
  PENDING
  REPLIED
}

enum AuthProviderType {
  GOOGLE
  CREDENTIALS
}

enum PaymentMethod {
  CREDIT
  CASH
  MOMO
}

enum NotificatioType {
  ORDER
  DELIVERY
  REPORT
}

enum PushNotiType {
  ENABLED
  DISABLED
  LOGOUT
}

enum Platform {
  ANDROID
  IOS
}

enum TicketStatus {
  PENDING
  PROCESSING
  CLOSED
}
