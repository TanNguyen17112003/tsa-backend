// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"] // Target for Vercel
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        String   @id @default(cuid())
  content   String   @db.VarChar(255)
  createdAt DateTime @default(dbgenerated("now()"))
}

model User {
  id                String             @id @default(cuid())
  firstName         String             @db.VarChar(50)
  lastName          String             @db.VarChar(50)
  role              UserRole           @default(CUSTOMER)
  customer          Customer?
  staff             Staff?
  admin             Admin?
  verified          Boolean            @default(false)
  verificationEmail VerificationEmail?
  Credentials       Credentials?
  AuthProvider      AuthProvider?
}

model Credentials {
  uid      String @id @default(cuid())
  user     User   @relation(fields: [uid], references: [id])
  email    String @unique @db.VarChar(50)
  password String @db.VarChar(255)
}

model AuthProvider {
  uid  String           @id @default(cuid())
  user User             @relation(fields: [uid], references: [id])
  type AuthProviderType
}

model Customer {
  customerId String  @id @unique
  user       User    @relation(fields: [customerId], references: [id])
  orders     Order[]
}

model Staff {
  staffId    String      @id @unique
  user       User        @relation(fields: [staffId], references: [id])
  deliveries Delivery[]
  orders     Order[]
  status     StaffStatus @default(AVAILABLE)
}

model Admin {
  adminId String @id @unique
  user    User   @relation(fields: [adminId], references: [id])
}

model VerificationEmail {
  id        String   @id @default(cuid())
  userId    String   @unique
  otp       String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime @default(dbgenerated("now() + interval '3 minutes'"))
}

model Order {
  id            String      @id @default(cuid())
  customerId    String
  status        OrderStatus @default(PENDING)
  customer      Customer    @relation(fields: [customerId], references: [customerId])
  staffId       String? // staff that approve the order at station
  staff         Staff?      @relation(fields: [staffId], references: [staffId])
  createdAt     String      @db.VarChar(255) // Unix timestamp for easy calculating between database datetime with js one
  deliveredAt   String?     @db.VarChar(255)
  cancelledAt   String?     @db.VarChar(255)
  rejectedAt    String?     @db.VarChar(255)
  acceptedAt    String?     @db.VarChar(255)
  shippingFee   Float
  address       String      @db.VarChar(255) // ex: KTX Khu B, ĐHQG TP.HCM 
  room          String?     @db.VarChar(20) // ex: 101
  building      String?     @db.VarChar(20) // ex: A
  delivery      Delivery?   @relation(fields: [deliveryId], references: [deliveryId])
  deliveryId    String?
  verified      Boolean     @default(false)
  ordinalNumber Int         @db.SmallInt //  Thứ tự của đơn hàng trong 1 chuyến giao hàng
}

model Delivery {
  deliveryId String         @id @default(cuid())
  createdAt  String         @db.VarChar(255) // Unix timestamp for easy calculating between database datetime with js one
  acceptedAt String?        @db.VarChar(255)
  deliveryAt String?        @db.VarChar(255)
  limitTime  String         @db.VarChar(255)
  delayTime  String?        @db.VarChar(255)
  status     DeliveryStatus @default(PENDING)
  orders     Order[]
  shipperId  String?        @db.VarChar(255) // Staft who takes responsible for the delivery
  staff      Staff?         @relation(fields: [shipperId], references: [staffId])
}

enum UserRole {
  ADMIN
  CUSTOMER
  STAFF
}

enum OrderStatus {
  PENDING
  ACCEPTED
  REJECTED
  DELIVERED
  CANCELLED
  IN_TRANSPORT
}

enum DeliveryStatus {
  PENDING
  ACCEPTED
  SUCCESS
}

enum StaffStatus {
  AVAILABLE
  BUSY
}

enum AuthProviderType {
  GOOGLE
  CREDENTIALS
}
