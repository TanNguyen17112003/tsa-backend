// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"] // Target for Vercel
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  firstName         String?            @db.VarChar(50)
  lastName          String?            @db.VarChar(50)
  phoneNumber       String?            @unique @db.VarChar(15)
  role              UserRole           @default(STUDENT)
  createdAt         String             @db.VarChar(255) // Unix timestamp for easy calculating between database datetime with js one
  student           Student?
  staff             Staff?
  admin             Admin?
  verified          Boolean            @default(false)
  verificationEmail VerificationEmail?
  Credentials       Credentials?
  AuthProvider      AuthProvider?
  refreshTokens     RefreshToken[]
}

model Credentials {
  uid      String  @id @default(cuid())
  user     User    @relation(fields: [uid], references: [id])
  email    String  @unique @db.VarChar(50)
  password String? @db.VarChar(255)
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model AuthProvider {
  uid  String           @id @default(cuid())
  user User             @relation(fields: [uid], references: [id])
  type AuthProviderType
}

model Student {
  studentId String     @id @unique
  user      User       @relation(fields: [studentId], references: [id])
  status    UserStatus @default(OFFLINE)
  dormitory Dormitory?
  building  String?
  room      String?
  orders    Order[]
  reports   Report[]
}

model Staff {
  staffId    String     @id @unique
  user       User       @relation(fields: [staffId], references: [id])
  deliveries Delivery[]
  status     UserStatus @default(OFFLINE)
  orders     Order[]
}

model Admin {
  adminId String   @id @unique
  user    User     @relation(fields: [adminId], references: [id])
  reports Report[]
  orders  Order[]
}

model VerificationEmail {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  token     String
  expiresAt DateTime @default(dbgenerated("now() + interval '3 minutes'"))
}

model Order {
  id                 String               @id @default(cuid())
  studentId          String?
  student            Student?             @relation(fields: [studentId], references: [studentId])
  adminId            String?              @db.VarChar(255) // Admin who accepts or rejects the order
  admin              Admin?               @relation(fields: [adminId], references: [adminId])
  shippingFee        Float?
  deliveryDate       String?
  isPaid             Boolean              @default(false)
  deliveries         Delivery[]
  room               String?              @db.VarChar(255)
  dormitory          Dormitory?
  building           String?              @db.VarChar(255)
  checkCode          String               @db.VarChar(255)
  ordinalNumber      Int?                 @db.SmallInt //  Thứ tự của đơn hàng trong 1 chuyến giao hàng
  report             Report[]
  product            String               @db.VarChar(255) // Các sản phẩm để tăng tính xác thực khi admin xác nhận đơn hàng
  weight             Float?
  shipperId          String?              @db.VarChar(255) // Staff who takes responsibility for the delivery
  staff              Staff?               @relation(fields: [shipperId], references: [staffId])
  paymentMethod      PaymentMethod?
  OrderStatusHistory OrderStatusHistory[]
  phone              String?              @db.VarChar(15)
}

model OrderStatusHistory {
  id      String      @id @default(cuid())
  orderId String      @db.VarChar(255)
  order   Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status  OrderStatus
  reason  String?     @db.Text
  time    String      @db.VarChar(255) // Unix timestamp for each time the status changes
}

model Delivery {
  id                    String                  @id @default(cuid())
  createdAt             String                  @db.VarChar(255) // Unix timestamp for easy calculating between database datetime with js one
  limitTime             Int // Thời gian giới hạn để nhận đơn hàng (giây)
  // delayTime             String?                 @db.VarChar(255)
  orders                Order[]
  staffId               String?                 @db.VarChar(255) // Staft who takes responsible for the delivery
  staff                 Staff?                  @relation(fields: [staffId], references: [staffId])
  DeliveryStatusHistory DeliveryStatusHistory[]
}

model DeliveryStatusHistory {
  id         String         @id @default(cuid())
  deliveryId String         @db.VarChar(255)
  delivery   Delivery       @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  status     DeliveryStatus
  reason     String?        @db.Text
  time       String         @db.VarChar(255) // Unix timestamp for each time the status changes
}

model Report {
  id         String       @id @default(cuid())
  orderId    String       @db.VarChar(255)
  order      Order        @relation(fields: [orderId], references: [id])
  content    String       @db.Text
  reportedAt String       @db.VarChar(255) // Unix timestamp for easy calculating between database datetime with js one
  proof      String       @db.VarChar(255) // URL to image or video
  reply      String?      @db.Text
  repliedAt  String?      @db.VarChar(255) // Unix timestamp for easy calculating between database datetime with js one
  status     ReportStatus @default(PENDING)
  replierId  String?      @db.VarChar(255) // Admin who replies the report
  admin      Admin?       @relation(fields: [replierId], references: [adminId])
  studentId  String       @db.VarChar(255) // Student who reports the order
  student    Student      @relation(fields: [studentId], references: [studentId])
}

enum UserRole {
  ADMIN
  STUDENT
  STAFF
}

enum Dormitory {
  A
  B
}

enum OrderStatus {
  PENDING
  ACCEPTED
  REJECTED
  DELIVERED
  CANCELED
  IN_TRANSPORT
}

enum DeliveryStatus {
  PENDING
  ACCEPTED
  FINISHED
  CANCELED
}

enum UserStatus {
  AVAILABLE
  BUSY
  OFFLINE
}

enum ReportStatus {
  PENDING
  REPLIED
}

enum AuthProviderType {
  GOOGLE
  CREDENTIALS
}

enum PaymentMethod {
  CREDIT
  CASH
  MOMO
}
