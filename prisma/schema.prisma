// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model Sample {
  id String @id @default(cuid())
  content String @db.VarChar(255)
  createdAt DateTime @default(dbgenerated("now()"))
}

model User {
  id String @id @default(cuid())
  email String @unique @db.VarChar(50)
  firstName String @db.VarChar(50)
  lastName String @db.VarChar(50)
  password String @db.VarChar(255)
  role UserRole @default(CUSTOMER)
  customer Customer? 
  shipper Shipper?
  staff Staff?
  admin Admin?
  verified Boolean @default(false)
  verificationEmail VerificationEmail?
}

model Customer {
  customerId String @id @unique
  user User @relation(fields: [customerId], references: [id])
  orders Order[]
}

model Staff {
  staffId String @id @unique
  user User @relation(fields: [staffId], references: [id])
  orders Order[]
}

model Shipper {
  shipperId String @id @unique
  user User @relation(fields: [shipperId], references: [id])
  orders Order[]
}

model Admin {
  adminId String @id @unique
  user User @relation(fields: [adminId], references: [id])
}

model VerificationEmail {
  id String @id @default(cuid())
  userId String @unique
  otp String
  user User @relation(fields: [userId], references: [id])
  expiresAt DateTime @default(dbgenerated("now() + interval '3 minutes'"))
}

model Order {
  id String @id @default(cuid())
  customerId String
  status OrderStatus @default(PENDING)
  customer Customer @relation(fields: [customerId], references: [customerId])
  shipperId String? // This is for when the order is initialy created by customer but not yet found a proper shipper
  shipper Shipper? @relation(fields: [shipperId], references: [shipperId])
  staffId String? // This is for the order is accepted from both sides: customer and shipper but no staff gets it.
  staff Staff? @relation(fields: [staffId], references: [staffId])
  createdAt DateTime @default(dbgenerated("now()"))
  deliveredAt DateTime?
  cancelledAt DateTime?
  rejectedAt DateTime?
  acceptedAt DateTime?
  shippingFee Float
  address String @db.VarChar(255)
}


enum UserRole {
  ADMIN
  CUSTOMER
  STAFF
  SHIPPER
}

enum OrderStatus {
  PENDING
  ACCEPTED
  REJECTED
  DELIVERED
  CANCELLED
  IN_TRANSPORT
}
